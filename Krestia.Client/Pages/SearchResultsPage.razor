@page "/search/{*input}"
@using Krestia.Web.Common
@inject HttpClient HttpClient

@if (Error is not null) {
   <p>An error occurred while fetching data: @Error</p>
}

@if (Results is null) {
   <p>Searching for @(Input)...</p>
} else if (Results.IsEmpty) {
   <p>No results for @(Input).</p>
} else {
   if (Results.DecomposedResults.Any()) {
      <p>Gloss result for "@Input":</p>
      <div>
         <table class="gloso-tabelo">
            <thead>
            <tr>
               <th>Word</th><th>Gloss</th><th>Base word</th><th>Inflections</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var result in Results.DecomposedResults) {
               if (result.HasValue) {
                  <tr>
                     <td>@result.Value.SearchedWord</td>
                     <td>@result.Value.Meaning</td>
                     <td>
                        <a href=@($"/word/{result.Value.BaseWord}")>@result.Value.BaseWord</a>
                     </td>
                     <td>
                        @(string.Join("-", result.Value.Steps))
                     </td>
                  </tr>
               }
            }
            </tbody>
         </table>
      </div>
   }

   @if (Results.Results.Any()) {
      <div class="peto">Search results for "@Input":</div>
      @foreach (var result in Results.Results) {
         <div class="rezulto">
            <span class="rezulto-vorto">
               <a href=@($"/word/{result.Spelling}")>@result.Spelling</a>
            </span>
            <span class="rezulto-signifo">@result.Meaning</span>
         </div>
      }
   }
}

@code {

   [Parameter]
   public string Input { get; set; } = "";

   private string? Error { get; set; }
   private SearchResponse? Results { get; set; }

   protected override async Task OnParametersSetAsync() {
      Results = await HttpClient.GetFromJsonAsync<SearchResponse>($"/api/search/{Input}");
   }

}