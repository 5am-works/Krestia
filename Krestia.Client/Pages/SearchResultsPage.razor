@page "/search/{*input}"
@using Krestia.Web.Common
@inject HttpClient HttpClient

@if (Error is not null) {
   <p>An error occurred while fetching data: @Error</p>
}

@if (Results is null) {
   <p>Searching for @(Input)...</p>
} else if (Results.IsEmpty) {
   <p>No results for @(Input).</p>
} else {
   if (Results.DecomposedResults.Any(result => !result.IsEmpty)) {
      <p>Gloss result for "@Input":</p>
      <div>
         <table class="gloso-tabelo">
            <thead>
            <tr>
               <th>Word</th><th>Base word</th><th>Inflections</th><th>Gloss</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var result in Results.DecomposedResults) {
               <tr>
                  <td>@result.SearchedWord</td>
                  <td>
                     @if (result.OriginalWord is not null) {
                        <span>(reduced form of) <a href=@($"/word/{result.OriginalWord}")>@result.OriginalWord</a></span>
                     } else {
                        <a href=@($"/word/{result.BaseWord}")>@result.BaseWord</a>
                     }
                  </td>
                  <td>
                     @(string.Join("-", result.Steps))
                  </td>
                  <td>@result.Meaning</td>
               </tr>
            }
            </tbody>
         </table>
      </div>
   }

   @if (Results.Results.Any()) {
      <div class="peto">Search results for "@Input":</div>
      @foreach (var result in Results.Results) {
         <div class="rezulto">
            <span class="rezulto-vorto">
               <a href=@($"/word/{result.Spelling}")>@result.Spelling</a>
            </span>
            <span class="rezulto-signifo">@result.Meaning</span>
         </div>
      }
   }
}

@code {

   [Parameter]
   public string Input { get; set; } = "";

   private string? Error { get; set; }
   private SearchResponse? Results { get; set; }

   protected override async Task OnParametersSetAsync() {
      Results = null;
      Error = null;
      StateHasChanged();
      try {
         Results = await HttpClient.GetFromJsonAsync<SearchResponse>($"/api/search/{Input}");
      } catch (Exception e) {
         Error = e.Message;
      }
   }

}